{"version":3,"file":"blueprintjs.cjs.production.min.js","sources":["../src/ObjectFieldTemplate.tsx","../src/FieldTemplate.tsx","../src/Fields.ts","../src/DescriptionField.tsx","../src/TextWidget.tsx","../src/Widgets.ts","../src/CheckboxWidget.tsx","../src/PasswordWidget.tsx","../src/SelectWidget.tsx","../src/TextareaWidget.tsx","../src/UpDownWidget.tsx","../src/Theme.ts","../src/BPForm.tsx"],"sourcesContent":["import React from 'react';\nimport { H5 } from '@blueprintjs/core';\nimport { ObjectFieldTemplateProps } from '@rjsf/core';\n\nexport default function ObjectFieldTemplate(props: ObjectFieldTemplateProps) {\n  const { idSchema, title, description, properties } = props;\n  return (\n    <div className={`schema-${idSchema.$id}`}>\n      <H5>{title}</H5>\n      {description}\n      {properties.map((element) => (\n        <div key={element.name} className=\"property-wrapper\">\n          {element.content}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport { FieldTemplateProps } from '@rjsf/core';\nimport { Classes, FormGroup } from '@blueprintjs/core';\n\nexport default function FieldTemplate(props: FieldTemplateProps) {\n  const { children, displayLabel, rawDescription, rawHelp } = props;\n  return (\n    <FormGroup helperText={rawHelp}>\n      {children}\n      {displayLabel && rawDescription && (\n        <p\n          className={Classes.TEXT_SMALL}\n          style={{\n            opacity: 0.7,\n          }}\n        >\n          {rawDescription}\n        </p>\n      )}\n    </FormGroup>\n  );\n}\n","import DescriptionField from \"./DescriptionField\";\n\n/**\n * TODO:\n * TitleField\n */\n\nexport default {\n  DescriptionField,\n};\n","import React from 'react';\nimport { FieldProps } from '@rjsf/core';\nimport { Classes } from '@blueprintjs/core';\n\nexport default function DescriptionField({ description }: FieldProps) {\n  if (description) {\n    return <p className={Classes.TEXT_MUTED}>{description}</p>;\n  }\n  return null;\n}\n","/* eslint-disable */\nimport React from 'react';\nimport { WidgetProps } from '@rjsf/core';\nimport { FormGroup, InputGroup, Classes, NumericInput, Intent } from '@blueprintjs/core';\nimport { UIOptions } from './types';\n\nexport default function TextWidget({\n  id,\n  required,\n  readonly,\n  disabled,\n  label,\n  value,\n  onChange,\n  onBlur,\n  onFocus,\n  autofocus,\n  options,\n  schema,\n  placeholder,\n  ...props\n}: WidgetProps) {\n  const myOptions = options as UIOptions;\n  // I contributed to update this lying type declaration, it's merged on master and will be in their next release\n  const rawErrors: string[] = (props as any).rawErrors;\n  const helperText =\n    rawErrors && rawErrors.length ? (\n      <ul className={Classes.LIST}>\n        {rawErrors.map((error, i: number) => {\n          return <li key={i}>{error}</li>;\n        })}\n      </ul>\n    ) : undefined;\n\n  const _onChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n    onChange(value === '' ? options.emptyValue : value);\n\n  const _onBlur = ({ target: { value } }: React.FocusEvent<HTMLInputElement>) => onBlur(id, value);\n\n  const _onFocus = ({ target: { value } }: React.FocusEvent<HTMLInputElement>) => onFocus(id, value);\n\n  const input = (() => {\n    const inputProps = {\n      intent: rawErrors && rawErrors.length ? Intent.DANGER : undefined,\n      id,\n      placeholder,\n      disabled: disabled || readonly,\n      required,\n      onChange: _onChange,\n      onBlur: _onBlur,\n      onFocus: _onFocus,\n      autoFocus: autofocus,\n      value: value || '',\n    };\n\n    switch (schema.type) {\n      case 'string':\n        return <InputGroup {...inputProps} type={myOptions.inputType} />;\n      case 'number':\n        return <NumericInput {...inputProps} buttonPosition={myOptions.isUpDown ? undefined : 'none'} />;\n      case 'integer':\n        // TODO: take care of the fix on blueprint about NumericInput in controlled mode\n        return (\n          <NumericInput\n            minorStepSize={null}\n            majorStepSize={null}\n            onValueChange={(_valueAsNumber, valueAsString) => {\n              onChange(parseInt(valueAsString));\n            }}\n            buttonPosition={myOptions.isUpDown ? undefined : 'none'}\n            {...inputProps}\n          />\n        );\n      case 'null':\n      default:\n        return undefined;\n    }\n  })();\n\n  return (\n    <FormGroup\n      intent={rawErrors && rawErrors.length ? 'danger' : undefined}\n      helperText={helperText}\n      label={myOptions.title || label || schema.title}\n      labelFor={id}\n      labelInfo={required ? '(required)' : undefined}\n    >\n      {input}\n    </FormGroup>\n  );\n}\n","import CheckboxWidget from \"./CheckboxWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\n/**\n * TODO:\n * CheckboxesWidget\n * RadioWidget\n * RangeWidget\n */\n\nexport default {\n  CheckboxWidget,\n  PasswordWidget,\n  SelectWidget,\n  TextareaWidget,\n  TextWidget,\n  UpDownWidget,\n};\n","/* eslint-disable */\nimport React from 'react';\nimport { WidgetProps } from '@rjsf/core';\nimport { FormGroup, Checkbox, Classes } from '@blueprintjs/core';\n\nexport default function CheckboxWidget({\n  id,\n  required,\n  readonly,\n  disabled,\n  label,\n  value,\n  onChange,\n  onBlur,\n  onFocus,\n  autofocus,\n  options,\n  schema,\n  placeholder,\n  ...props\n}: WidgetProps) {\n  const rawErrors: string[] = (props as any).rawErrors;\n\n  const helperText =\n    rawErrors && rawErrors.length ? (\n      <ul className={Classes.LIST}>\n        {rawErrors.map((error, i: number) => {\n          return <li key={i}>{error}</li>;\n        })}\n      </ul>\n    ) : undefined;\n\n  const _onChange = ({ target: { checked } }: React.ChangeEvent<HTMLInputElement>) => onChange(checked);\n\n  const _onBlur = ({ target: { value } }: React.FocusEvent<HTMLInputElement>) => onBlur(id, value);\n\n  const _onFocus = ({ target: { value } }: React.FocusEvent<HTMLInputElement>) => onFocus(id, value);\n\n  return (\n    <FormGroup\n      intent={rawErrors && rawErrors.length ? 'danger' : undefined}\n      helperText={helperText}\n      label={label || schema.title}\n      labelFor={id}\n      labelInfo={required ? '(required)' : undefined}\n    >\n      <Checkbox\n        id={id}\n        checked={value}\n        required={required}\n        disabled={disabled || readonly}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n    </FormGroup>\n  );\n}\n","import React from 'react';\nimport { WidgetProps } from '@rjsf/core';\nimport TextWidget from './TextWidget';\n\nexport default function PasswordWidget({ options, ...props }: WidgetProps) {\n  // eslint-disable-next-line\n  options.inputType = 'password';\n  return <TextWidget {...props} options={options} />;\n}\n","/* eslint-disable */\nimport React from 'react';\nimport { FormGroup, HTMLSelect, Classes } from '@blueprintjs/core';\nimport { WidgetProps } from '@rjsf/core';\nimport { UIOptions } from './types';\n\nexport default function SelectWidget({\n  id,\n  required,\n  readonly,\n  disabled,\n  label,\n  value,\n  onChange,\n  onBlur,\n  onFocus,\n  autofocus,\n  options,\n  schema,\n  placeholder,\n  ...props\n}: WidgetProps) {\n  const { enumOptions } = options as UIOptions;\n  const rawErrors: string[] = (props as any).rawErrors;\n  const helperText =\n    rawErrors && rawErrors.length ? (\n      <ul className={Classes.LIST}>\n        {rawErrors.map((error, i: number) => {\n          return <li key={i}>{error}</li>;\n        })}\n      </ul>\n    ) : undefined;\n\n  const _onChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLSelectElement>) => onChange(value);\n\n  const _onBlur = ({\n    target: { value },\n  }: React.FocusEvent<HTMLSelectElement>) => onBlur(id, value);\n\n  const _onFocus = ({\n    target: { value },\n  }: React.FocusEvent<HTMLSelectElement>) => onFocus(id, value);\n\n  return (\n    <FormGroup\n      intent={rawErrors && rawErrors.length ? 'danger' : undefined}\n      helperText={helperText}\n      label={options.title || label || schema.title}\n      labelFor={id}\n      labelInfo={required ? '(required)' : undefined}\n    >\n      <HTMLSelect\n        required={required}\n        disabled={disabled || readonly}\n        value={value}\n        id={id}\n        options={enumOptions}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n    </FormGroup>\n  );\n}\n","/* eslint-disable */\nimport React from 'react';\nimport { WidgetProps } from '@rjsf/core';\nimport { TextArea, FormGroup, Classes } from '@blueprintjs/core';\n\nexport default function TextareaWidget({\n  id,\n  placeholder,\n  value,\n  required,\n  disabled,\n  autofocus,\n  label,\n  readonly,\n  onBlur,\n  onFocus,\n  onChange,\n  options,\n  schema,\n  ...props\n}: WidgetProps) {\n  const rawErrors: string[] = (props as any).rawErrors;\n  const helperText =\n    rawErrors && rawErrors.length ? (\n      <ul className={Classes.LIST}>\n        {rawErrors.map((error, i: number) => {\n          return <li key={i}>{error}</li>;\n        })}\n      </ul>\n    ) : undefined;\n\n  const _onChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLTextAreaElement>) =>\n    onChange(value === '' ? options.emptyValue : value);\n  const _onBlur = ({\n    target: { value },\n  }: React.FocusEvent<HTMLTextAreaElement>) => onBlur(id, value);\n  const _onFocus = ({\n    target: { value },\n  }: React.FocusEvent<HTMLTextAreaElement>) => onFocus(id, value);\n\n  return (\n    <FormGroup\n      intent={rawErrors && rawErrors.length ? 'danger' : undefined}\n      helperText={helperText}\n      label={options.title || label || schema.title}\n      labelFor={id}\n      labelInfo={required ? '(required)' : undefined}\n    >\n      <TextArea\n        style={{ width: '100%' }}\n        id={id}\n        placeholder={placeholder}\n        disabled={disabled || readonly}\n        required={required}\n        autoFocus={autofocus}\n        value={value}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n    </FormGroup>\n  );\n}\n","import React from 'react';\nimport { WidgetProps } from '@rjsf/core';\nimport TextWidget from './TextWidget';\n\nexport default function UpDownWidget({ options, ...props }: WidgetProps) {\n  // eslint-disable-next-line\n  options.isUpDown = true;\n  return <TextWidget {...props} options={options} />;\n}\n","import { ThemeProps, utils } from \"@rjsf/core\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport Fields from \"./Fields\";\nimport Widgets from \"./Widgets\";\n\nconst { fields, widgets } = utils.getDefaultRegistry();\n\nconst Theme: ThemeProps = {\n  fields: { ...fields, ...Fields },\n  widgets: {\n    ...widgets,\n    ...Widgets,\n  },\n  ObjectFieldTemplate,\n  FieldTemplate,\n};\n\nexport default Theme;\n","import { withTheme, FormProps } from \"@rjsf/core\";\n\nimport Theme from \"./Theme\";\nimport { StatelessComponent, ComponentClass } from \"react\";\n\nconst BPForm:\n  | ComponentClass<FormProps<any>>\n  | StatelessComponent<FormProps<any>> = withTheme(Theme);\n\nexport default BPForm;\n"],"names":["ObjectFieldTemplate","props","description","properties","React","className","idSchema","$id","H5","title","map","element","key","name","content","FieldTemplate","rawDescription","FormGroup","helperText","rawHelp","children","displayLabel","Classes","TEXT_SMALL","style","opacity","DescriptionField","TEXT_MUTED","TextWidget","id","required","readonly","disabled","label","value","onChange","onBlur","onFocus","autofocus","options","schema","placeholder","myOptions","rawErrors","length","LIST","error","i","undefined","_onChange","target","emptyValue","_onBlur","_onFocus","input","inputProps","intent","Intent","DANGER","autoFocus","type","InputGroup","inputType","NumericInput","buttonPosition","isUpDown","minorStepSize","majorStepSize","onValueChange","_valueAsNumber","valueAsString","parseInt","labelFor","labelInfo","CheckboxWidget","Checkbox","checked","PasswordWidget","SelectWidget","enumOptions","HTMLSelect","TextareaWidget","TextArea","width","UpDownWidget","utils","getDefaultRegistry","widgets","Theme","fields","Fields","Widgets","BPForm","withTheme"],"mappings":"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"}